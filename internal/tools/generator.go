// Package tools provides internal tools for development of GoWalkLox.
package tools

import (
	"os"
	"strings"
	"text/template"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

//go:generate stringer -type=TokID ../tokens
//go:generate go run gen_expressions.go
//go:generate gofmt -w ../expressions/expr_structs_ints.go

type FuncStr struct {
	Name     string
	Receiver string
	Params   []string
	Return   []string
	Body     []string
}

func (f *FuncStr) ListParams() string {
	return strings.Join(f.Params, ",")
}

func (f *FuncStr) ListReturns() string {
	return strings.Join(f.Return, ",")
}

type StructStr struct {
	Name   string
	Fields []string
}

type InterfaceStr struct {
	Name string
	Sigs []FuncStr
}

type PkgTemplateData struct {
	Package    string
	Structs    []StructStr
	Interfaces []InterfaceStr
	Methods    []FuncStr
}

func GeneratePkgFile(f *os.File, ft *PkgTemplateData) {
	pkgTemplate.Execute(f, ft)
}

func UpperString(s string) string {
	return cases.Title(language.Und).String(s)
}

const pkgTmpString = `// Code generated by walklox/internal/tools . DO NOT EDIT.

package {{.Package}}

import "devZ/lox/internal/tokens"

{{range $ifc := .Interfaces}}
type {{$ifc.Name}} interface { {{range $sig := $ifc.Sigs}}
	{{$sig.Name}}({{$sig.ListParams}}) ({{$sig.ListReturns}}) {{end}}
}
{{end}}

{{range $st := .Structs}}
type {{$st.Name}} struct { {{range $field := $st.Fields}}
	{{$field}} {{end}}
}
{{end}}

{{range $m := .Methods}}
func ({{$m.Receiver}}) {{$m.Name}}({{$m.ListParams}}) ({{$m.ListReturns}}) { {{range $ln := .Body}}
	{{$ln}} {{end}}
}
{{end}}
`

var pkgTemplate = template.Must(template.New("tmp").Parse(pkgTmpString))
